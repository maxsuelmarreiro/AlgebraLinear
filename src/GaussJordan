/**
 *
 * @author '-Maxsuel
 */
public class GaussJordan {

    public static void main(String[] args) {
        double mat[][] = {
            {5, 5, 0, 15},
            {2, 4, 1, 10},
            {3, 4, 0, 11}
        };

        System.out.println("Inicial");
        printMatriz(mat);

        for (int linha = 0; linha < mat.length; linha++) {
            // mat.length       == linha (3)
            // mat[0].length    == coluna(4)

            if (mat[linha][linha] != 0) {
                double inverterPivo = 1.0 / mat[linha][linha];
                for (int coluna = 0; coluna < mat[0].length; coluna++) {
                    mat[linha][coluna] = inverterPivo * mat[linha][coluna];
                }
            }

            System.out.println("-- Pivô da linha " + linha + " --");
            printMatriz(mat);

            for (int auxLinha = 0; auxLinha < mat.length; auxLinha++) {
                if (linha != auxLinha) { //fazer calculo apenas nas outras linhas, não na do pivo.
                    double x = mat[auxLinha][linha];
                    for (int i = 0; i < mat[auxLinha].length; i++) {
                        mat[auxLinha][i] = mat[auxLinha][i] + (x * mat[linha][i]) * -1;
                    }
                    System.out.println("-- Zerar | linha " + auxLinha + " da coluna " + linha + " --");
                    printMatriz(mat);
                } else {
                    System.out.println("-- Pulou " + linha + " (linha(" + linha + ") == auxLinha(" + auxLinha + ")) --");
                }

            }

            System.out.println("-- Fim da linha " + linha + " --");
        }

        System.out.println("-- Matriz Final --");
        printMatriz(mat);

    }

    private static void printMatriz(double[][] mat) {
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                System.out.print(mat[i][j] == -0 ? "0.0 " : mat[i][j] + " ");
            }
        System.out.println("");
        }
    }
}
